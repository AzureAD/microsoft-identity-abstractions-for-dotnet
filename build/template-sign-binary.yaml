# template-sign-binary.yaml
# Signs a binary via ESRP

parameters:
  FolderPath: ''
  Pattern: ''

steps:
# The signing task requires dotnet core 2.x
- task: UseDotNet@2
  displayName: 'Use .Net Core sdk 2.x'
  inputs:
    version: 2.x

- task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
  displayName: 'Sign Binary: ${{ parameters.Pattern }}'
  inputs:
    ConnectedServiceName: 'IDDP Code Signing'
    FolderPath: ${{ parameters.FolderPath }}
    Pattern: ${{ parameters.Pattern }}
    UseMinimatch: true
    signConfigType: inlineSignParams
    inlineOperation: |
     [
       {
         "keyCode": "CP-230012",
         "operationSetCode": "SigntoolSign",
         "parameters": [
         {
           "parameterName": "OpusName",
           "parameterValue": "Microsoft"
         },
         {
           "parameterName": "OpusInfo",
           "parameterValue": "http://www.microsoft.com"
         },
         {
           "parameterName": "PageHash",
           "parameterValue": "/NPH"
         },
         {
           "parameterName": "FileDigest",
           "parameterValue": "/fd sha256"
         },
         {
           "parameterName": "TimeStamp",
           "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
         }
         ],
         "toolName": "signtool.exe",
         "toolVersion": "6.2.9304.0"
       },
       {
         "keyCode": "CP-230012",
         "operationSetCode": "SigntoolVerify",
         "parameters": [ ],
         "toolName": "signtool.exe",
         "toolVersion": "6.2.9304.0"
       }
     ]
    SessionTimeout: 20
    VerboseLogin: true
  timeoutInMinutes: 10
  condition: and(succeeded(), eq(variables['PipelineType'], 'Legacy'))

- task: onebranch.pipeline.signing@1
  displayName: 'Sign ${{ parameters.Pattern }} with OneBranch'
  inputs:
    command: 'sign'
    signing_profile: 'external_distribution' #CP-230012 -> https://eng.ms/docs/products/onebranch/signing/containerbuildsigning#signing-using-onebranchpipelinesigning-ado-task
    files_to_sign: '${{ parameters.Pattern }}'
    search_root: '${{ parameters.FolderPath }}'
  condition: and(succeeded(), eq(variables['PipelineType'], 'OneBranch'))

- task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@4
  displayName: 'Run BinSkim ${{ parameters.Pattern }}'
  inputs:
    InputType: Basic
    AnalyzeTargetGlob: ${{ parameters.Pattern }}
    AnalyzeVerbose: true
    AnalyzeHashes: true
  condition: and(succeeded(), eq(variables['PipelineType'], 'Legacy'))
 
- task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@2
  displayName: 'Check BinSkim Results'
  inputs:
    GdnBreakGdnToolBinSkim: true
  condition: and(succeeded(), eq(variables['PipelineType'], 'Legacy'))
