<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using System;
using System.Net.Http;
using System.Security.Claims;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Identity.Abstractions;

namespace Microsoft.Identity.Abstractions
{
    /// <summary>
    /// Interface used to call a downstream REST API, for instance from controllers, including with
    /// specialized methods depending on the Http Methods.
    /// </summary>
    public partial interface IDownstreamRestApi
    {
<#
  foreach(string httpMethod in new string[]{  "Get", "Post", "Put", "Delete"} )
  {
   foreach(string token in new string[] {"User", "App"})
   {
    foreach(string template in new string[] {"<TInput>", "<TOutput>", "<TInput, TOutput>"} )
    {
     bool hasOutput =  template.Contains("TOutput");
     bool hasInput = template.Contains("TInput");

     if (httpMethod == "Get" && !hasOutput)
      continue;

     if ((httpMethod == "Post" || httpMethod == "Put" || httpMethod == "Delete") && !hasInput)
      continue;

     bool hasApp = (token == "App");
     string returnType = hasOutput ? "Task<TOutput?>" : "Task";
     string content = hasInput ? "effectiveInput" : "null";
     string user = !hasApp ? "user" : "null";
     string sampleCodeTemplate = template.Replace("TOutput", "IEnumerable<MyItem>").Replace("TInput", "MyItem").Replace("<", "&lt;").Replace(">", "&gt;");
#>

        /// <summary>
        /// Calls, using <see cref="HttpMethod.<#= httpMethod #>"/>, a downstream REST API <#= hasInput ? "with some input data " : ""#><#= hasInput&&hasOutput ? "and " : ""#><#= hasOutput ? "returning data" : ""#>.
        /// By default <#= hasInput ? "the input data is serialized in JSON " : ""#><#= hasInput&&hasOutput ? "and " : ""#><#= hasOutput ? "the returned data is deserialized from JSON" : ""#> but you can provide <#= hasInput ? "your own serializer " : ""#><#= hasInput&&hasOutput ? "and " : ""#><#= hasOutput ? "your own deserializer" : ""#> in the action
        /// you pass-in through the <paramref name="downstreamRestApiOptionsOverride"/> parameter.
        /// </summary>
<# if (hasInput){ #>
        /// <typeparam name="TInput">Generic input type.</typeparam>
<# } #>
<# if (hasOutput){ #>
        /// <typeparam name="TOutput">Generic output type.</typeparam>
<# } #>
        /// <param name="serviceName">Name of the service describing the downstream REST API. There can
        /// be several configuration named sections mapped to a <see cref="DownstreamRestApiOptions"/>,
        /// each for one downstream REST API. You can pass-in null, but in that case <paramref name="downstreamRestApiOptionsOverride"/>
        /// needs to be set.</param>
<# if (hasInput){ #>
        /// <param name="input">Data sent to the downstream web API, through the body or the HTTP request.</param>
<# } #>
        /// <param name="downstreamRestApiOptionsOverride">[Optional] Overrides the options proposed in the configuration described
        /// by <paramref name="serviceName"/>.</param>
<# if (!hasApp){ #>
        /// <param name="user">[Optional] Claims representing a user. This is useful in platforms like Blazor
        /// or Azure Signal R, where the HttpContext is not available. In other platforms, the library
        /// will find the user from the HttpContext.</param>
<# } #>
        /// <param name="cancellationToken"></param>
        /// <returns> <#= hasInput? "The value returned by the downstream web API." : "a Task" #></returns>
        /// <example>
        /// <code>
        ///  <#= hasOutput?"var result =" : "" #> await _downstreamWebApi.<#= httpMethod #>For<#= token #>Async<#= sampleCodeTemplate #>(
        ///         "MyService",
<# if (hasInput){ #>
        ///         myItem,
<# } #>
        ///         options =>
        ///         {
        ///           options.RelativePath = $"api/todolist<#= hasInput? "/{myItem.Id}": ""#>";
        ///         });
        /// </code>
        /// </example>
        public <#= returnType #> <#= httpMethod #>For<#= token #>Async<#= template #>(
            string? serviceName,
<# if (hasInput){ #>
            TInput input,
<# } #>
            Action<DownstreamRestApiOptionsNoHttpMethod>? downstreamRestApiOptionsOverride = null,
<# if (!hasApp){ #>
            ClaimsPrincipal? user = null,
<# } #>
            CancellationToken cancellationToken = default)<#= hasOutput?"where TOutput : class;" :";" #>
<#
    }
   }
  }
#>
    }
}
